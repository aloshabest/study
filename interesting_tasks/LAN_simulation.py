# Представьте, что вы получили задание от заказчика. Вас просят реализовать простую имитацию локальной сети, состоящую из набора серверов, соединенных между собой через роутер.
#
# Каждый сервер может отправлять пакет любому другому серверу сети. Для этого у каждого есть свой уникальный IP-адрес. Для простоты - это просто целое (натуральное) число от 1 и до N, где N - общее число серверов. Алгоритм, следующий. Предположим, сервер с IP = 2 собирается отправить пакет информации серверу с IP = 3. Для этого, он сначала отправляет пакет роутеру, а уже тот, смотрит на IP-адрес и пересылает пакет нужному узлу (серверу).
#
# Для реализации этой схемы программе предлагается объявить три класса:
#
# Server - для описания работы серверов в сети;
# Router - для описания работы роутеров в сети (в данной задаче полагается один роутер);
# Data - для описания пакета информации.
#
# Серверы будут создаваться командой:
#
# sv = Server()
# При этом, уникальный IP-адрес каждого сервера должен формироваться автоматически при создании нового экземпляра класса Server.
#
# Далее, роутер должен создаваться аналогичной командой:
#
# router = Router()
# А, пакеты данных, командой:
#
# data = Data(строка с данными, IP-адрес назначения)
# Для формирования и функционирования локальной сети, в классе Router должны быть реализованы следующие методы:
#
# link(server) - для присоединения сервера server (объекта класса Server) к роутеру;
# unlink(server) - для отсоединения сервера server (объекта класса Server) от роутера;
# send_data() - для отправки всех пакетов (объектов класса Data) из буфера роутера соответствующим серверам (после отправки буфер должен очищаться).
#
# И одно обязательное локальное свойство (могут быть и другие свойства):
#
# buffer - список для хранения принятых от серверов пакетов (объектов класса Data).
#
# Класс Server должен содержать свой набор методов:
#
# send_data(data) - для отправки информационного пакета data (объекта класса Data) с указанным IP-адресом получателя (пакет отправляется роутеру и сохраняется в его буфере - локальном свойстве buffer);
# get_data() - возвращает список принятых пакетов (если ничего принято не было, то возвращается пустой список) и очищает входной буфер;
# get_ip() - возвращает свой IP-адрес.
#
# Соответственно в объектах класса Server должны быть локальные свойства:
#
# buffer - список принятых пакетов (изначально пустой);
# ip - IP-адрес текущего сервера.
#
# Наконец, объекты класса Data должны содержать, два следующих локальных свойства:
#
# data - передаваемые данные (строка);
# ip - IP-адрес назначения.


from random import randint


class Server:
    def __init__(self):
        self.buffer = []
        self.ip = str(randint(0, 255)) + '.' + str(randint(0, 255)) + '.' + str(randint(0, 255)) + '.' + str(
            randint(0, 255))
        self.lst = []

    def send_data(self, data):
        """отправка пакета DATA с IP-адресом получателя роутеру"""
        self.lst[0].buffer.append(data)

    def get_data(self):
        """возвращает список принятых пакетов и очищает его"""
        lst = self.buffer[:]
        del self.buffer[:]
        return lst

    def get_ip(self):
        """возвращает IP-адрес сервера"""
        return self.ip


class Router:
    def __init__(self):
        self.buffer = []
        self.lst = []

    def link(self, server):
        """подключение сервера к роутеру"""
        self.lst.append(server)
        server.lst.append(self)

    def unlink(self, server):
        """отключение сервера от роутера"""
        self.lst.remove(server)
        server.lst.remove(self)

    def send_data(self):
        """отправка пакетов DATA по соответствующему IP-адресу получателя"""
        for i in self.buffer:
            for j in self.lst:
                if i.ip == j.ip:
                    j.buffer.append(i)
        del self.buffer[:]


class Data:
    def __init__(self, data, ip):
        self.data = data
        self.ip = ip


router = Router()
sv_from = Server()
router.link(sv_from)
router.link(Server())
router.link(Server())
sv_to = Server()
router.link(sv_to)
print('список серверов подключенных к роутеру:')
for i in router.lst:
    print(i, i.ip)
print()
print('отправка данных роутеру')
sv_from.send_data(Data("Hello", sv_to.get_ip()))
print('список данных полученных от сервера:')
print(f'DATA: {router.buffer[0].data}; IP получателя: {router.buffer[0].ip}')
print()
print('отправка данных от роутера получателю')
router.send_data()
print('список данных полученных от сервера:')
print(f'DATA: {router.buffer}; IP получателя: {router.buffer}')
print()
print('отправка данных роутеру')
sv_to.send_data(Data("Hi", sv_from.get_ip()))
print('список данных полученных от сервера:')
print(f'DATA: {router.buffer[0].data}; IP получателя: {router.buffer[0].ip}')
print()
print('отправка данных от роутера получателю')
router.send_data()
print('список данных полученных от сервера:')
print(f'DATA: {router.buffer}; IP получателя: {router.buffer}')
print()
msg_lst_from = sv_from.get_data()
msg_lst_to = sv_to.get_data()
print('Данные, полученные серверами от роутера:')
print(msg_lst_from[0].data, msg_lst_from[0].ip)
print(msg_lst_to[0].data, msg_lst_to[0].ip)